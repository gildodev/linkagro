from django.core.exceptions import (
    ValidationError, ObjectDoesNotExist, PermissionDenied, FieldError, SuspiciousOperation
)
from django.db import IntegrityError, DatabaseError, OperationalError, DataError, ProgrammingError
from django.http import Http404

# üîπ Dicion√°rio com C√≥digos de Status HTTP e Mensagens Padr√£o
HTTP_STATUS_CODES = {
    200: "OK - Solicita√ß√£o bem-sucedida.",
    201: "Criado - O recurso foi criado com sucesso.",
    202: "Aceito - A solicita√ß√£o foi aceita para processamento.",
    204: "Sem Conte√∫do - A solicita√ß√£o foi processada, mas n√£o h√° conte√∫do para retornar.",
    400: "Requisi√ß√£o Inv√°lida - Os dados enviados s√£o inv√°lidos.",
    401: "N√£o Autorizado - Credenciais inv√°lidas ou n√£o fornecidas.",
    403: "Proibido - Voc√™ n√£o tem permiss√£o para acessar este recurso.",
    404: "N√£o Encontrado - O recurso solicitado n√£o foi encontrado.",
    405: "M√©todo N√£o Permitido - O m√©todo HTTP n√£o √© permitido para este endpoint.",
    409: "Conflito - Erro de integridade ou duplica√ß√£o de dados.",
    422: "Entidade N√£o Process√°vel - Os dados enviados n√£o podem ser processados.",
    429: "Muitas Solicita√ß√µes - Voc√™ excedeu o limite de requisi√ß√µes.",
    500: "Erro Interno do Servidor - Um erro inesperado ocorreu.",
    502: "Bad Gateway - Erro ao se comunicar com um servi√ßo externo.",
    503: "Servi√ßo Indispon√≠vel - O servidor est√° temporariamente indispon√≠vel.",
    504: "Gateway Timeout - O tempo limite da requisi√ß√£o foi atingido."
}

def handle_django_exception(exc):
    """
    Captura exce√ß√µes do Django e retorna um dicion√°rio contendo:
    - C√≥digo de status HTTP
    - Mensagem de erro apropriada
    """
    
    # üîπ ERROS DE VALIDA√á√ÉO & CLIENTE (400-499)
    if isinstance(exc, ValidationError):
        return {"status": 400, "error": exc.message_dict}
    elif isinstance(exc, ObjectDoesNotExist) or isinstance(exc, Http404):
        return {"status": 404, "error": HTTP_STATUS_CODES[404]}
    elif isinstance(exc, PermissionDenied):
        return {"status": 403, "error": HTTP_STATUS_CODES[403]}
    elif isinstance(exc, FieldError):
        return {"status": 400, "error": "Erro de campo inv√°lido na consulta."}
    elif isinstance(exc, SuspiciousOperation):
        return {"status": 400, "error": HTTP_STATUS_CODES[400]}
    
    # üîπ ERROS DE BANCO DE DADOS (500-599)
    elif isinstance(exc, IntegrityError):
        return {"status": 409, "error": HTTP_STATUS_CODES[409]}
    elif isinstance(exc, DatabaseError):
        return {"status": 500, "error": HTTP_STATUS_CODES[500]}
    elif isinstance(exc, OperationalError):
        return {"status": 503, "error": HTTP_STATUS_CODES[503]}
    elif isinstance(exc, DataError):
        return {"status": 400, "error": HTTP_STATUS_CODES[400]}
    elif isinstance(exc, ProgrammingError):
        return {"status": 500, "error": HTTP_STATUS_CODES[500]}

    # üîπ ERROS N√ÉO TRATADOS
    else:
        return {"status": 500, "error": HTTP_STATUS_CODES[500]}
